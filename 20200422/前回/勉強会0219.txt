●いつやるか？
2020/02/19(wed.) 16:00～
資料：02/14(fri.)


●なにやるか？
テスト 第2回
・テスト駆動開発	中野
25分

・複雑なテストコーディング方法	渡辺
25分


■シナリオについて
１●はじめに
前回は「テスト自動化」というお話と、基本的なテストコードの書き方についてお話をしました。
それを踏まえ、今回私からは「テスト駆動開発」というものについてお話をしようと思います。

ところで、「テスト駆動開発」という言葉をご存知でしょうか。
・「聞いたこともない」という方
→話し甲斐があります
・「名前くらいは、なんとなく」という方
→今日、聞きに来て下さった方々は、この辺りでしょうか。
・「理解してるし、既に取り入れている」という方
→私からお話することは何もありません…


あと、今日は私にしては珍しく、実践を含めたお話にしました。
手を動かしながら、テスト駆動開発を紹介しようと思います。
想定外の事態が起きるのではないか、ややドキドキしてます。

では早速、始めていきましょう。


２●テスト駆動開発とは？
アジャイルとかエクストリームプログラミングとか、最近は開発手法が多様化してきました。
そんな「いまどきのITワード」の一つが、「テスト駆動開発」です。
関連して、「テストファースト」というキーワードもあるのですが、
日経コンピュータとか、@ITとか、なんとなくでも情報収集を行っている方であれば、
必ず目にされたことはあると思います。

テスト駆動開発は、自動テストの延長上にある概念です。
ザックリ概要を説明すると、
1．システム開発手法である
テスト駆動「開発」という言葉の通り、システム開発を行うための手法です
2．自動テストに関連する
プログラム開発と同時に、テストコードの作成も行ってしまうものです
3．「テストファースト」である
そして、最も特徴的なのは、その開発手順です。「テストファースト」という言葉の通り、
「テストを先に作る」という点で抜群に奇妙です。

1,2 あたりは、なんとなく想像はできそうですが、3はちょっと混乱を招くかもしれませんね。
「テストするモノ」が無いのに、どうやって先にテストを作るの？と思われるかもしれません。


大まかに、手順はこうです。
(図)

テスト駆動開発には、次の３つのステップがあります。
有名な、テストから始まる3ステップです。

STEP1 赤 失敗するテストを書く：
まず、プログラムに対するテストコードを先に作ります。
実装したい機能がいくつもあるならば、一個ずつ対応していくのが良いでしょう。
ここで大事なことなんですが、このテストは必ず「失敗」します。
そもそもなんですが、肝心のプログラム本体が出来てないのですから、当然といえば当然ですね。
でも良いのです、テスト駆動開発は、必ず「失敗するテスト」から始まるのです。
失敗するテストなので、イメージカラーは「赤」です。


STEP2 緑 テスト成功：
STEP1で作成したテストが成功するように、プログラム本体の実装を行ないます。
このとき、誤解を恐れずに言えば、「どんな実装を行っても良い」です。
最短時間で、テストが成功するような実装方法を目指します。
例えば、作るものが「入力値が3で割り切れたらtrueを返すプログラム」で、
テストの内容が「入力値=3の結果がtrueと一致する」だったとしましょう。
それならば、「return true;」という一行を実装してしまうのです。
インチキっぽいですが、今はこれでいいのです。
とにかく、テストを通すための最短距離を目指すのです。
これで、とりあえずテストは通るようになったはずです。
通らなかったテストを通るようにするので、イメージカラーは「緑」です。

STEP3 青 リファクタリング：
テストが通ったら、その時点でのプロダクトコードを見直します。
コードの重複はないか、シンプルに書けないか、など、「きれいなコード」を意識して直します。
この時大事なのは、「今まで通っているテストが失敗にならないように気を付けること」です。
イメージカラーを設定する必要はないのかもしれませんが、なんかあった方が良さそうなんで
なんとなく「青」です。


STEP1に戻って、新しいテストを追加します。
次に実装したい機能のテストでも良いですし、前に実装した機能のカバレッジを上げるためのテストでも良いです。
とにかく、新しいテストを追加します。
当然、この新しく追加したテストは失敗すると思いますので、
今度は、それが通るように実装していく
→通るようになったら、その状態を維持しながら、コードを綺麗にする。
→次のテストを追加…

という感じで、この「Red→Green→Blue」のステップをイテレーションしながら、
開発を進めていくのです。
何度も何度も繰り返しているうちに、最終的なプロダクトコードが完成し、同時に、
そのプロダクトコードのテストコードも完成する、という寸法ですね。


３●実践してみましょう
では、言葉であれこれ言っていてもなかなか理解し辛いかもしれませんので、
実際にやってみます。
→javaScript開発における、TDD
 いつもJavaなんで、少し趣向を変えまして、JavaScriptで書いてみます。
 VSCODEが軽量なんで好きです。
 JavaScriptにも、実に様々なテストフレームワークが存在しています。
 その中で、結構新しめで、私も使いやすいなと思った「ava」を
 今回は取り上げようと思います。

こんな感じでテストを書きます。

テストが通れば、こんな表示になります。

テストが失敗したら、どこで失敗してるか分かります。



 題材は、いわゆるフィズバズ問題にしようと思います。
 プロダクトコードをゼロから組み上げて、同時にテストコードも作る、という過程をお見せします。



 
■命題［FizzBuzz 問題］
1から100までの数をプリントするプログラムを書け。
ただし3の倍数のときは数の代わりに「Fizz」と、
5の倍数のときは「Buzz」とプリントし、
3と5両方の倍数の場合には「FizzBuzz」とプリントすること。

■モジュール定義
・「プリント」の部分は console.log(a); で実装
・「1から100まで」の部分は、for 構文で実装
  ↓
「
	for(let i=1; i<101; i++) {
		console.log(fizzBuzz(i));
	}
」
という処理をイメージして、
この「fizzBuzz()」というモジュール（function）を、テスト駆動開発する。

■機能要件分割
a. インプット値を文字列として返す
b. ただし、3の倍数のときは「Fizz」を返す
c. ただし、5の倍数のときは「Buzz」を返す
d. ただし、3と5両方の倍数の場合には「FizzBuzz」を返す
e. 1から100までの数がインプット可能
 （= 0以下、もしくは、101以上の数、及び、
  数値以外の値がインプットされた場合は例外をスロー）



-- 題材は、いわゆるフィズバズ問題にしようと思ったのですが、たくさん書くのが大変なので、
-- 以下のようにします。
-- ■「テスト駆動開発」第一章、第二章
 
 


４●特徴について
いかがだったでしょうか。
わかりにくい部分などもあったかもしれませんが、前章で説明した
「Red→Green→Blue」を繰り返して、完成に近づけていっている、という
雰囲気は、なんとなく感じ取って頂けたと思います。

さて、こんなややこしい手順で実装を行うと、どんな良いことがあるのか、
それは次のような点になります。
・プロダクトコードにムダがなく、綺麗で見通しが良い
与えたテスト「だけ」通るように実装しますので、
プロダクトコードの重複や、使わないコードが排除されます。なので、必要な機能だけが実装された、
実に洗練されたコードに仕上がることが期待されます。
それに加え、綺麗で可読性が良いため、保守性の高いコードになることが期待されます
・テストコードが同時に生成される
当たり前ですが、最初にテストから作り始めて、常にテストを実施しながら
プロダクトコードを作りますので、テストコードも出来上がります。しかも、
極めて網羅率の高い、優秀なテストコードであることが期待されます。

余談
最近では、TDD（test driven development）から、
BDD（behavior driven development）という言い方に変化してきているようです。
「ビヘイビア（= 振る舞い）」に着目し、それを検証するコードを先に書いて、あとはテスト駆動開発と同様の流れです。
「テスト」とは、つまり、広い意味で「振る舞い（ビヘイビア）」の検証を指している、という考え方でしょうかね。



５●まとめ
いかがでしたでしょうか。
ということで、テスト駆動開発についてお話させて頂きました。

最後にリマインドがてら、サクッとまとめますと、
①重要なポイントとは、
・テストを先に書く
・何度もイテレーションしながら完成に近づけていく
・そして、必ずリファクタリングを考える
ということになります。
そして、
②テスト駆動開発のメリットは、
・プロダクトコードが完全で綺麗
・テストコードが同時に生成される
ということですね。

ただ、今回紹介したように、どのようなプロダクトに対しても、いつも必ず、ピッタリとハマるとは限りません。
中には、テストファーストで作りにくいような機能もあるかもしれません。
いつまで経っても、完成が見えてこない、ということもあるかもしれません。

しかし、そんな事は些細な問題です。
少々、うまくいかない事例があったからといって、テスト駆動開発をやらない理由にはならないと思います。
逆に、うまくいかない理由とかを突き詰めていくと、今度は、「テストを書きやすい」「テスト駆動開発しやすい」
ような機能の実装方法とか、クラス構成とかが、知見として蓄積されていくでしょう。
積極的に取り入れ、トライ＆エラーで是非とも自分のものにしていって頂けたら、必ずや強力な武器になるはずです。

私もがんばります。

「なんとか駆動●●」「なんとかドリブン◯◯」とは、「なんとか」から始める〇〇、という意味合いです。
個人データを用いたサービスが復旧してきた、昨今の世の中を指して、「データ駆動型社会」とかね。
amazonの購入履歴に基づいておすすめされたり、YahooやGoogleやSNSの広告が変わったり。
あれ、たまに困ったりするんですけどね。

テストドリブンデベロップメントを自分のスキルとして身につけ、
是非とも、なんとかドリブンな自動テストライフをお送りください。



